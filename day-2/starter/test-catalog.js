// ============================================
// Day 2: Product Catalog Tests
// ============================================
// DO NOT EDIT THIS FILE
// Tests will run automatically when you open index.html
// Open DevTools Console (F12) to see detailed results
// ============================================

// Simple test framework
function assert(condition, message) {
  if (!condition) {
    throw new Error(`❌ ${message}`);
  }
}

function assertEqual(actual, expected, message) {
  if (actual !== expected) {
    throw new Error(`❌ ${message}\n   Expected: ${expected}\n   Got: ${actual}`);
  }
}

function testSection(sectionName, tests) {
  console.log(`\n${'='.repeat(50)}`);
  console.log(`Testing: ${sectionName}`);
  console.log('='.repeat(50));
  
  let passed = 0;
  let failed = 0;

  tests.forEach(({ name, test }) => {
    try {
      test();
      console.log(`✓ ${name}`);
      passed++;
    } catch (error) {
      console.error(`✗ ${name}`);
      console.error(`  ${error.message}`);
      failed++;
    }
  });

  console.log(`\n${sectionName} Results: ${passed} passed, ${failed} failed`);
  
  if (failed === 0) {
    console.log(`🎉 ${sectionName}: ALL TESTS PASSED!`);
  }
  
  return { passed, failed };
}

// Wait for page to load
window.addEventListener('load', () => {
  // Small delay to let everything initialize
  setTimeout(runTests, 500);
});

function runTests() {
  console.log('\n🧪 Starting Day 2 Tests...\n');

  let totalPassed = 0;
  let totalFailed = 0;

  // ============================================
  // SECTION 1: DISPLAY PRODUCTS
  // ============================================
  const section1 = testSection('Section 1: Display Products', [
    {
      name: 'displayProducts function exists',
      test: () => {
        assert(typeof displayProducts === 'function', 'displayProducts should be a function');
      }
    },
    {
      name: 'Product grid element exists',
      test: () => {
        const grid = document.getElementById('product-grid');
        assert(grid !== null, 'Element with id "product-grid" should exist');
      }
    },
    {
      name: 'Products are displayed (check DOM)',
      test: () => {
        displayProducts(products);
        const grid = document.getElementById('product-grid');
        const productCards = grid.querySelectorAll('.product-card');
        assert(productCards.length > 0, 'Should display product cards in the grid');
      }
    },
    {
      name: 'Displays correct number of products',
      test: () => {
        displayProducts(products);
        const grid = document.getElementById('product-grid');
        const productCards = grid.querySelectorAll('.product-card');
        assertEqual(productCards.length, products.length, `Should display ${products.length} products`);
      }
    },
    {
      name: 'Product card contains required elements',
      test: () => {
        displayProducts(products);
        const firstCard = document.querySelector('.product-card');
        assert(firstCard !== null, 'At least one product card should exist');
        
        const hasImage = firstCard.querySelector('.product-image') !== null;
        const hasName = firstCard.querySelector('h3') !== null;
        const hasPrice = firstCard.querySelector('.price') !== null;
        const hasButton = firstCard.querySelector('button') !== null;
        
        assert(hasImage, 'Product card should have image element');
        assert(hasName, 'Product card should have name (h3)');
        assert(hasPrice, 'Product card should have price');
        assert(hasButton, 'Product card should have button');
      }
    },
    {
      name: 'Handles empty array gracefully',
      test: () => {
        displayProducts([]);
        const grid = document.getElementById('product-grid');
        const productCards = grid.querySelectorAll('.product-card');
        assertEqual(productCards.length, 0, 'Should display 0 products for empty array');
      }
    }
  ]);

  totalPassed += section1.passed;
  totalFailed += section1.failed;

  // ============================================
  // SECTION 2: FILTER BY CATEGORY
  // ============================================
  const section2 = testSection('Section 2: Filter by Category', [
    {
      name: 'filterByCategory function exists',
      test: () => {
        assert(typeof filterByCategory === 'function', 'filterByCategory should be a function');
      }
    },
    {
      name: 'Filters electronics correctly',
      test: () => {
        filterByCategory('electronics');
        const grid = document.getElementById('product-grid');
        const productCards = grid.querySelectorAll('.product-card');
        const electronicsCount = products.filter(p => p.category === 'electronics').length;
        assertEqual(productCards.length, electronicsCount, `Should display ${electronicsCount} electronics`);
      }
    },
    {
      name: 'Filters clothing correctly',
      test: () => {
        filterByCategory('clothing');
        const grid = document.getElementById('product-grid');
        const productCards = grid.querySelectorAll('.product-card');
        const clothingCount = products.filter(p => p.category === 'clothing').length;
        assertEqual(productCards.length, clothingCount, `Should display ${clothingCount} clothing items`);
      }
    },
    {
      name: 'Filters home correctly',
      test: () => {
        filterByCategory('home');
        const grid = document.getElementById('product-grid');
        const productCards = grid.querySelectorAll('.product-card');
        const homeCount = products.filter(p => p.category === 'home').length;
        assertEqual(productCards.length, homeCount, `Should display ${homeCount} home items`);
      }
    },
    {
      name: 'Filters office correctly',
      test: () => {
        filterByCategory('office');
        const grid = document.getElementById('product-grid');
        const productCards = grid.querySelectorAll('.product-card');
        const officeCount = products.filter(p => p.category === 'office').length;
        assertEqual(productCards.length, officeCount, `Should display ${officeCount} office items`);
      }
    },
    {
      name: '"all" shows all products',
      test: () => {
        filterByCategory('all');
        const grid = document.getElementById('product-grid');
        const productCards = grid.querySelectorAll('.product-card');
        assertEqual(productCards.length, products.length, 'Should display all products');
      }
    }
  ]);

  totalPassed += section2.passed;
  totalFailed += section2.failed;

  // ============================================
  // SECTION 3: SEARCH PRODUCTS
  // ============================================
  const section3 = testSection('Section 3: Search Products', [
    {
      name: 'searchProducts function exists',
      test: () => {
        assert(typeof searchProducts === 'function', 'searchProducts should be a function');
      }
    },
    {
      name: 'Search finds "mouse"',
      test: () => {
        searchProducts('mouse');
        const grid = document.getElementById('product-grid');
        const productCards = grid.querySelectorAll('.product-card');
        const mouseProducts = products.filter(p => 
          p.name.toLowerCase().includes('mouse')
        );
        assertEqual(productCards.length, mouseProducts.length, 'Should find products with "mouse" in name');
      }
    },
    {
      name: 'Search finds "shirt"',
      test: () => {
        searchProducts('shirt');
        const grid = document.getElementById('product-grid');
        const productCards = grid.querySelectorAll('.product-card');
        const shirtProducts = products.filter(p => 
          p.name.toLowerCase().includes('shirt')
        );
        assertEqual(productCards.length, shirtProducts.length, 'Should find products with "shirt" in name');
      }
    },
    {
      name: 'Search is case-insensitive',
      test: () => {
        searchProducts('MOUSE');
        const grid = document.getElementById('product-grid');
        const productCards = grid.querySelectorAll('.product-card');
        assert(productCards.length > 0, 'Should find products regardless of case');
      }
    },
    {
      name: 'Empty search shows all products',
      test: () => {
        searchProducts('');
        const grid = document.getElementById('product-grid');
        const productCards = grid.querySelectorAll('.product-card');
        assertEqual(productCards.length, products.length, 'Empty search should show all products');
      }
    },
    {
      name: 'No results for non-existent product',
      test: () => {
        searchProducts('xyz123nonexistent');
        const grid = document.getElementById('product-grid');
        const productCards = grid.querySelectorAll('.product-card');
        assertEqual(productCards.length, 0, 'Should show no products for non-matching search');
      }
    }
  ]);

  totalPassed += section3.passed;
  totalFailed += section3.failed;

  // ============================================
  // SECTION 4: SORT PRODUCTS
  // ============================================
  const section4 = testSection('Section 4: Sort Products', [
    {
      name: 'sortProducts function exists',
      test: () => {
        assert(typeof sortProducts === 'function', 'sortProducts should be a function');
      }
    },
    {
      name: 'Sort by price (low to high)',
      test: () => {
        sortProducts('price-low');
        const grid = document.getElementById('product-grid');
        const productCards = grid.querySelectorAll('.product-card');
        
        if (productCards.length >= 2) {
          const firstPrice = parseFloat(productCards[0].querySelector('.price').textContent.replace('$', ''));
          const lastPrice = parseFloat(productCards[productCards.length - 1].querySelector('.price').textContent.replace('$', ''));
          assert(firstPrice <= lastPrice, 'First product should have lower or equal price than last product');
        }
      }
    },
    {
      name: 'Sort by price (high to low)',
      test: () => {
        sortProducts('price-high');
        const grid = document.getElementById('product-grid');
        const productCards = grid.querySelectorAll('.product-card');
        
        if (productCards.length >= 2) {
          const firstPrice = parseFloat(productCards[0].querySelector('.price').textContent.replace('$', ''));
          const lastPrice = parseFloat(productCards[productCards.length - 1].querySelector('.price').textContent.replace('$', ''));
          assert(firstPrice >= lastPrice, 'First product should have higher or equal price than last product');
        }
      }
    },
    {
      name: 'Sort by name (alphabetical)',
      test: () => {
        sortProducts('name');
        const grid = document.getElementById('product-grid');
        const productCards = grid.querySelectorAll('.product-card');
        
        if (productCards.length >= 2) {
          const firstName = productCards[0].querySelector('h3').textContent.trim();
          const secondName = productCards[1].querySelector('h3').textContent.trim();
          assert(firstName <= secondName, 'Products should be in alphabetical order');
        }
      }
    },
    {
      name: 'Sorting doesn\'t modify original array',
      test: () => {
        const originalLength = products.length;
        const originalFirstId = products[0].id;
        
        sortProducts('price-high');
        
        assertEqual(products.length, originalLength, 'Original array length should not change');
        assertEqual(products[0].id, originalFirstId, 'Original array should not be modified');
      }
    }
  ]);

  totalPassed += section4.passed;
  totalFailed += section4.failed;

  // ============================================
  // SECTION 4B: CART INTEGRATION
  // ============================================
  const section4b = testSection('Section 4: Cart Integration', [
    {
      name: 'handleAddToCart function exists',
      test: () => {
        assert(typeof handleAddToCart === 'function', 'handleAddToCart should be a function');
      }
    },
    {
      name: 'updateCartDisplay function exists',
      test: () => {
        assert(typeof updateCartDisplay === 'function', 'updateCartDisplay should be a function');
      }
    },
    {
      name: 'Cart count element exists',
      test: () => {
        const cartCount = document.getElementById('cart-count');
        assert(cartCount !== null, 'Element with id "cart-count" should exist');
      }
    }
  ]);

  totalPassed += section4b.passed;
  totalFailed += section4b.failed;

  // ============================================
  // FINAL SUMMARY
  // ============================================
  console.log('\n' + '='.repeat(50));
  console.log('FINAL TEST SUMMARY');
  console.log('='.repeat(50));
  console.log(`Total Tests: ${totalPassed + totalFailed}`);
  console.log(`✓ Passed: ${totalPassed}`);
  console.log(`✗ Failed: ${totalFailed}`);
  
  if (totalFailed === 0) {
    console.log('\n🎉🎉🎉 ALL TESTS PASSED! GREAT WORK! 🎉🎉🎉');
  } else {
    console.log(`\n💪 Keep going! ${totalFailed} tests still need work.`);
  }
  
  console.log('\n💡 TIP: Open DevTools (F12) to see this output clearly');
  console.log('='.repeat(50) + '\n');
}
